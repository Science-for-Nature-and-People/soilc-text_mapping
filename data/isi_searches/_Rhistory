if( sum(is.na(TLs)) == length(TLs) )
rr <- NA
if( sum(is.na(TLs)) != length(TLs) ) {
web.TLs <- matrix(rep(TLs, length(web[,1])), length(web[,1]), length(web[,1]))
lo.pc <- numeric(length=length(web[,1]))
for(i in 1:length(web[,1])) {
tt <- web.TLs[web[,i]==1,i]
if(length(tt)==0 | sum(!is.na(tt))==0 )
lo.pc[i] = NA
if(length(tt)>0 & sum(!is.na(tt))!=0)
lo.pc[i] <- sd(tt)
}
rr <- mean(lo.pc, na.rm=T)
}
rr
}
Bottom.Intermediate.Top <- function(web, proportion=TRUE, check.web=FALSE){
## find the names and numbers of BIT, unconnected and pure cannibals
names.all <- 1:length(web[1,])
dimnames(web) <- list(names.all, names.all)
names.Bottom <-  names.all[apply(web, 2, sum)==0 & apply(web, 1, sum)!=0]
number.Bottom <- length(names.Bottom)
names.Top <-   names.all[apply(web, 2, sum)!=0 & apply(web, 1, sum)==0]
number.Top <- length(names.Top)
names.Unconnected <- names.all[apply(web, 2, sum)==0 & apply(web, 1, sum)==0]
number.Unconnected <- length(names.Unconnected)
number.Pure.cannibals <- 0
names.Pure.cannibals <- character(0)
for(i in 1:length(web[,1]))
if(web[i,i]!=0 && sum(web[-i,i]+web[i,-i])==0){
if(number.Pure.cannibals==0){
names.Pure.cannibals <- dimnames(web)[[1]][i]
number.Pure.cannibals <- 1
}
else{
names.Pure.cannibals <- c(names.Pure.cannibals, dimnames(web)[[1]][i])
number.Pure.cannibals <- number.Pure.cannibals + 1
}
}
names.Intermediate <- dimnames(web)[[1]][is.na(match(dimnames(web)[[1]],
c(names.Bottom, names.Top, names.Unconnected, names.Pure.cannibals)))]
number.Intermediate <- length(web[1,])-number.Bottom-number.Top-number.Unconnected-number.Pure.cannibals
if(proportion)
result <- list(Bottom=names.Bottom,
Intermediate=names.Intermediate,
Top=names.Top,
Unconnected=names.Unconnected,
Pure.cannibals=names.Pure.cannibals,
Proportions.of.each=c(number.Bottom, number.Intermediate, number.Top, number.Unconnected, number.Pure.cannibals)/length(web[1,]))
if(!proportion)
result <- list(Bottom=names.Bottom,
Intermediate=names.Intermediate,
Top=names.Top,
Unconnected=names.Unconnected,
Pure.cannibals=names.Pure.cannibals,
Proportions.of.each=c(number.Bottom, number.Intermediate, number.Top, number.Unconnected, number.Pure.cannibals))
result
}
Num.herbivores <- function(web) {
S <- length(web[,1])
## Find the rows/columns with basal species
B.rows <-  c(1:S)[apply(web, 2, sum)==0 & apply(web, 1, sum)!=0]
## Find r/c wth species that only eat basal
if(length(B.rows)==0)
Nh <- NA
if(length(B.rows)>0) {
if( length(B.rows)>1 & (S-length(B.rows))>1 )
Nh <- sum( apply(web[B.rows,], 2, function(x) sum(x!=0)>0) &
apply(web[-B.rows,], 2, function(x) sum(x!=0)==0) )
if( length(B.rows)==1 & (S-length(B.rows))>1 )
Nh <- sum( web[B.rows,]!=0  &
apply(web[-B.rows,], 2, function(x) sum(x!=0)==0) )
if( length(B.rows)>1 & (S-length(B.rows))==1 )
Nh <- sum( apply(web[B.rows,], 2, function(x) sum(x!=0)>0) &
web[-B.rows,]==0)
}
Nh
}
Cannibals <- function(web)
length(dimnames(web)[[1]][diag(web)==1]) / length(web[1,])
Gen.sd <- function(web)
sd(colSums(web)/sum(web)/length(web[,1]))
Vul.sd <- function(web)
sd(rowSums(web)/sum(web)/length(web[,1]))
Maxsim <- function(web){
sims <- matrix(0, length(web[,1]), length(web[,1]))
for(i in 1:length(web[,1]))
for(j in 1:length(web[,1]))
sims[i,j] <- T.sim.ij(web, i, j)
diag(sims) <- NA
mean(apply(sims, 1, function(x) max(x[!is.na(x)])))
}
T.sim.ij <- function(web, i, j){
same <- sum(web[i,] & web[j,]) + sum(web[,i] & web[,j])
total <- sum(web[i,] | web[j,]) + sum(web[,i] | web[,j])
same / total
}
GetTL <- function(web){
## takes predation matrix with consumers in columns
## identify the columns with basal species
tweb <- t(web)
## make the rows add to one
rs <- rowSums(tweb)
for(i in 1:length(tweb[,1]))
tweb[i,tweb[i,]==1] = 1/rs[i]
nb.TL <- try(solve(diag(length(tweb[,1])) - tweb), T)
if(class(nb.TL)=="try-error")
nbTL <- rep(NA, length(tweb[,1]))
if(class(nb.TL)!="try-error")
nbTL <- rowSums(nb.TL)
nbTL
}
Matrix.to.list <- function(web.matrix, predator.first=TRUE){
if(length(dimnames(web.matrix)[[1]])==length(web.matrix[1,]))
species.names <- dimnames(web.matrix)[[1]]
else
species.names <- 1:length(web.matrix[,1])
web.list <- matrix(0, sum(web.matrix), 2)
counter <- 1
for(i in 1:length(web.matrix[,1]))
for(j in 1:length(web.matrix[,1]))
if(web.matrix[i,j]==1){
web.list[counter,] <- c(species.names[i],species.names[j])
counter <- counter + 1
}
if(!predator.first)
web.list <- cbind(web.list[,2], web.list[,1])
web.list
}
List.to.matrix <- function(web.list, predator.first=TRUE){
if(length(web.list[1,])==2){
## get the species names
species <- c(as.character(web.list[,1]), as.character(web.list[,2]))
species.names <- sort(unique(species[!is.na(species)]))
number.of.species <- length(species.names)
web.matrix <- matrix(0, number.of.species, number.of.species)
dimnames(web.matrix) <- list(species.names, species.names)
if(predator.first){
for(i in 1:length(web.list[,1])){
web.matrix[!is.na(match(dimnames(web.matrix)[[1]], web.list[i,2])),
!is.na(match(dimnames(web.matrix)[[2]], web.list[i,1]))] <- 1
}
}
if(!predator.first)
stop("Not completed the prey first non-range function")
}
if(length(web.list[1,])==3){
## get the species names
species <- c(web.list[,1])
for(i in 1:length(web.list[,1])){
if(is.na(web.list[i,3]))
species <- c(species, web.list[i,2])
if(!is.na(web.list[i,3]))
species <- c(species, web.list[i,2]:web.list[i,3])
}
species.names <- sort(unique(species[!is.na(species)]))
number.of.species <- length(species.names)
web.matrix <- matrix(0, number.of.species, number.of.species)
dimnames(web.matrix) <- list(species.names, species.names)
if(!is.numeric(species.names))
stop("Species names must be numeric in range type web lists")
if(predator.first)
for(i in 1:length(web.list[,1])){
if(is.na(web.list[i,3]))
web.matrix[!is.na(match(dimnames(web.matrix)[[1]], web.list[i,2])),
!is.na(match(dimnames(web.matrix)[[2]], web.list[i,1]))] <- 1
if(!is.na(web.list[i,3])){
prey.links <- web.list[i,2]:web.list[i,3]
for(p in prey.links)
web.matrix[!is.na(match(dimnames(web.matrix)[[1]], p)),
!is.na(match(dimnames(web.matrix)[[2]], web.list[i,1]))] <- 1
}
}
if(!predator.first)
stop("Not completed the prey first function")
}
web.matrix
}
Draw.net <- function(webmat, ylims=c(0, 20)) {
links <- matrix(as.numeric(Matrix.to.list(webmat)), sum(webmat), 2)
spp <- as.numeric(dimnames(webmat)[[1]])
add.spp <- c(1:40)[is.na(match(1:40, spp))]
webmat <- rbind(webmat, matrix(0, length(add.spp), length(webmat[1,])))
webmat <- cbind(webmat, matrix(0, length(webmat[,1]), length(add.spp)))
dimnames(webmat) <- list(c(spp, add.spp),
c(spp, add.spp))
webmat <- webmat[order(as.numeric(dimnames(webmat)[[1]])),
order(as.numeric(dimnames(webmat)[[1]]))]
nodes <- data.frame(species=dimnames(webmat)[[1]])
nodes <- transform(nodes, ypos=GetTL(webmat))
nodes <- transform(nodes, xpos=NA)
max.per.tl <- 0
for(i in 1:ceiling(max(nodes$ypos))) {
these <- nodes$ypos>=i & nodes$ypos<i+1
if(sum(these)>max.per.tl) max.per.tl=sum(these)
}
intrvl <- 1/max.per.tl
for(i in 1:ceiling(max(nodes$ypos))) {
these <- nodes$ypos>=i & nodes$ypos<i+1
xtemp <- seq(from=0, by=intrvl, length=sum(these))
xtemp <- xtemp-mean(xtemp) + 0.5
nodes$xpos[these] <- xtemp
}
plot(nodes$xpos, nodes$ypos, type="p",
axes=F, ann=F, xlim=c(0,1), ylim=ylims)
arrows(nodes$xpos[links[,1]], nodes$ypos[links[,1]],
nodes$xpos[links[,2]], nodes$ypos[links[,2]],
code=0, col="#00000022")
##points(nodes$xpos, nodes$ypos, pch=19, col="#ffffffff", cex=2)
points(nodes$xpos, nodes$ypos, pch=21, bg="#22222211", cex=1,
col="#22222211")
}
Plot.matrix(all.web.info$predation.matrix,
point.cex=2,
trait.cex=1,
diag.line=T,
traits=F,
by.consumer=T,
axes.labels=T,
sp.pt.ch=NA,
grid=T,
box=T)
all.web.info
test.food.web.matrix <- Niche.model(10, 20, 1)
image(test.food.web.matrix)
Plot.matrix(test.food.web.matrix,
point.cex=2,
trait.cex=1,
diag.line=T,
traits=F,
by.consumer=T,
axes.labels=T,
sp.pt.ch=NA,
grid=T,
box=T)
test.food.web.list <- as.data.frame(Matrix.to.list(test.food.web.matrix))
names(test.food.web.list) <- c("resource", "consumer")
test.food.web.list$resource <- letters[1:10][test.food.web.list$resource]
test.food.web.list$consumer <- letters[1:10][test.food.web.list$consumer]
cheddar.example.comm <- Community(nodes=data.frame(node=letters[1:10]),
properties=list(title="An example"),
trophic.links=test.food.web.list)
PlotPredationMatrix(cheddar.example.comm)
library(Basingstoke)
install.packages("Basingstoke")
install_github("quicklizard99/Basingstoke")
library(devtools)
install_github("quicklizard99/Basingstoke")
library(Basingstoke)
Artificial <- function(original, main, ...) {
artificial <- CommunityFactory(nodes=NPS(original),
C=DirectedConnectance(original),
properties=CPS(original),
n=1,
...)[[1]]
PlotPredationMatrix(artificial, main=paste0(main, ', C=',
sprintf('%.4f', DirectedConnectance(artificial))))
return (invisible(artificial))
}
data(TL84)
TL84 <- RemoveIsolatedNodes(OrderCommunity(TL84, 'M'), title='Tuesday Lake 1984')
par(mfrow=c(2,2))
PlotPredationMatrix(TL84,
main=paste0('Original, C=', sprintf('%.4f', DirectedConnectance(TL84))))
Artificial(TL84, generator=RandomLinks, main='Random')
Artificial(TL84, generator=CascadeModelLinks, main='Cacade')
Artificial(TL84, generator=NicheModelLinks, main='Niche')
TL84
is(TL84)
help("LoadCommunity")
test.community <- LoadCommunity('~/Google Drive/SNAPP-Soil-Carbon/Products/CA Rangelands/1. Logic Chain/Food web approach/Example/')
test.community <- LoadCommunity('~/Google Drive/SNAPP-Soil-Carbon/Products/CA Rangelands/1. Logic Chain/Food web approach/Example/')
test.community <- LoadCommunity('~/Google Drive/SNAPP-Soil-Carbon/Products/CA Rangelands/1. Logic Chain/Food web approach/Example/')
test.community <- LoadCommunity('~/Google Drive/SNAPP-Soil-Carbon/Products/CA Rangelands/1. Logic Chain/Food web approach/Example/')
help(readTableHeader)
readTableHeader
help("read.table")
help(LoadCommunity)
test.community <- LoadCommunity('~/Google Drive/SNAPP-Soil-Carbon/Products/CA Rangelands/1. Logic Chain/Food web approach/Example/',fn='read.csv')
test.community <- LoadCommunity('~/Google Drive/SNAPP-Soil-Carbon/Products/CA Rangelands/1. Logic Chain/Food web approach/Example',fn='read.csv')
test.community <- LoadCommunity('~/Google Drive/SNAPP-Soil-Carbon/Products/CA Rangelands/1. Logic Chain/Food web approach/Example')
test.community <- LoadCommunity('~/Google Drive/SNAPP-Soil-Carbon/Products/CA Rangelands/1. Logic Chain/Food web approach/Example')
test.community
PlotPredationMatrix(test.community)
par(mfrow=c(1,1))
PlotWebByLevel(test.community)
help(PlotWebByLevel)
PlotCircularWeb(test.community)
help(PlotCircularWeb)
help(PlotNPS)
test.community$nodes
PlotCircularWeb(test.community,node.labels=nodes$node)
PlotCircularWeb(test.community,node.labels=test.community$nodes$node)
test.community$nodes$node
PlotPredationMatrix(test.community)
PlotPredationMatrix(test.community,node.labels=test.community$nodes$node)
PlotCircularWeb(test.community,node.label=test.community$nodes$node)
PlotCircularWeb(test.community,node.labels=test.community$nodes$node)
warnings()
help(PlotNPS)
PlotCircularWeb(test.community,show.nodes.as='labels',node.labels=test.community$nodes$node)
test.community <- LoadCommunity('~/Google Drive/SNAPP-Soil-Carbon/Products/CA Rangelands/1. Logic Chain/Food web approach/Example')
PlotCircularWeb(test.community,show.nodes.as='labels',node.labels=test.community$nodes$node)
PlotPredationMatrix(test.community,show.nodes.as='labels',node.labels=test.community$nodes$node)
test.community <- LoadCommunity('~/Google Drive/SNAPP-Soil-Carbon/Products/CA Rangelands/1. Logic Chain/Food web approach/Example')
warnings()
PlotCircularWeb(test.community,show.nodes.as='labels',node.labels=test.community$nodes$node)
PlotWebByLevel(test.community)
PlotWebByLevel(test.community,show.nodes.as='labels',node.labels=test.community$nodes$node)
PlotPredationMatrix(test.community)
data(Benguela)
Benguela$properties
Benguela$nodes
Benguela$trophic.links
pm <- PredationMatrix(test.community,weight='link.strength')
PlotPredationMatrix(test.community)
PlotPredationMatrix(pm)
is(pm)
pm
pm2 <- PredationMatrix(Benguela, weight='diet.fraction')
is(pm2)
pm2
PlotPredationMatrix(pm2)
pm
library(igraph)
install.packages("igraph")
library(igraph)
help("graph_from_data_frame")
library(readr)
Nodes <- read_csv("~/Downloads/netscix2016/Dataset1-Media-Example-NODES.csv")
View(Nodes)
library(readr)
links <- read_csv("~/Downloads/netscix2016/Dataset1-Media-Example-EDGES.csv")
View(links)
head(links)
links
nodes
Nodes
links
links <- aggregate(links[,3], links[,-3], sum)
links <- links[order(links$from, links$to),]
colnames(links)[4] <- "weight"
rownames(links) <- NULL
links
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
net <- graph_from_data_frame(d=links, vertices=Nodes, directed=T)
plot(net)
net <- graph_from_data_frame(d=test.community$trophic.links,vertices=test.community$nodes,directed=T)
plot(net)
net
E(net)
names(E(net))
net
E(net)$width <- E(net)$link.strength
plot(net)
V(net)$color <- V(net)$functional.group
plot(net)
colrs <- c("gray50", "tomato", "gold")
V(net)$color <- colrs[V(net)$functional.group]
plot(net)
V(net)$functional.group
net2 <- graph_from_data_frame(d=links, vertices=Nodes, directed=T)
V(net)
V(net)$functional.group
colrs <- c("gray50", "tomato", "gold")
V(net2)$color <- colrs[V(net2)$media.type]
plot(net2)
V(net2)$color
V(net)$color
V(net)$functional.group
is(V(net2)$media.type)
is(V(net2)$functional.group)
is(V(net)$functional.group)
V(net)$color <- colrs[as.numeric(V(net)$functional.group)]
V(net)$color
colrs <- c("gray50", "tomato", "gold")
colrs
colrs[as.numeric(V(net)$functional.group)]
colrs[V(net)$functional.group]
V(net)$functional.group
as.numeric(V(net)$functional.group)
as.integer(V(net)$functional.group)
V(net)$f.g.2 <- c('1','1','3','2','3','3')
V(net)$color <- colrs[as.numeric(V(net)$f.g.2)]
V(net)$color
plot(net)
colrs <- c("gold", "brown", "green")
V(net)$f.g.2 <- c('1','1','3','2','3','3')
V(net)$color <- colrs[as.numeric(V(net)$f.g.2)]
plot(net)
E(net)$width <- E(net)$link.strength/2
plot(net)
E(net)$width <- E(net)$link.strength/4
plot(net)
E(net)$width <- E(net)$link.strength/5
plot(net)
help(PlotCircularWeb)
help(NMSPlot)
help(PlotNMS)
??PlotNvM
V(net)$functional.group
E(net)
V(net)$frame.color <- colrs[as.numeric(V(net)$f.g.2)]
V(net)$frame.color
knitr::opts_chunk$set(echo = TRUE)
hist(test.community$trophic.links$weight)
hist(test.community$trophic.links$weight)
test.community$trophic.links$weight
test.community$trophic.links$link.strength
hist(test.community$trophic.links$link.strength)
mean(test.community$trophic.links$link.strength)
sd(test.community$trophic.links$link.strength)
median(test.community$trophic.links$link.strength)
cut.off <- median(test.community$trophic.links$link.strength)
cut.off
delete_edges(net, E(net)[weight<cut.off])
net.sp <- delete_edges(net, E(net)[link.strength<cut.off])
net.sp
edge_density(net)
ecount(net)/(vcount(net)*(vcount(net)-1))
# Density of connections: proportion of present edges of all possible edges
# edge_density(net)
ecount(net)/(vcount(net)*(vcount(net)-1))
# Proportion of reciprocated ties
reciprocity(net)
dyad_census(net)
2*dyad_census(net)$mut/ecount(net)
is.directed(net)
mean_distance(net,directed=T)
distances(net)
distances(net,weights=NA)
distances(net,link.strength=NA)
net$weights
net
distances(net,weights=link.strength)
net$link.strength
net <- graph_from_data_frame(d=test.community$trophic.links,vertices=test.community$nodes,weights=link.strength,directed=T)
help(graph_from_data_frame)
distances(net,weights=trophic.links$link.strength)
distances(net,weights=test.community$trophic.links$link.strength)
help(shortest_paths)
V(net)
V(net)[media=="climate_mitigation"]
test.community$nodes
V(net)[node=="climate_mitigation"]
names(net)
net
V(net)[name=="climate_mitigation"]
test.community$nodes
V(net)[node=="climate_mitigation"]
V(net)
help(V)
V(net)$name
V(net)[name=="climate_mitigation"]
net <- graph_from_data_frame(d=test.community$trophic.links,vertices=test.community$nodes,directed=T)
V(net)[name=="climate_mitigation"]
V(net)$name
plot(net)
test.community <- LoadCommunity('~/Google Drive/SNAPP-Soil-Carbon/Products/CA Rangelands/1. Logic Chain/Food web approach/Example')
net <- graph_from_data_frame(d=test.community$trophic.links,vertices=test.community$nodes,directed=T)
plot(net)
V(net)[name=="climate_mitigation"]
help(cluster_edge_betweenness)
E(net)$weight
E(net)$link.strength
ceb <- cluster_edge_betweenness(net)
help(as.undirected)
net.sym <- as.undirected(net, mode="collapse",edge.attr.comb=list(weight="sum"))
cliques(net.undir) # list of cliques
sapply(cliques(net.undir), length) # clique sizes
largest_cliques(net.undir) # cliques with max number of nodes
net.undir <- as.undirected(net, mode="collapse",edge.attr.comb=list(weight="sum"))
cliques(net.undir) # list of cliques
sapply(cliques(net.undir), length) # clique sizes
largest_cliques(net.undir) # cliques with max number of nodes
vcol <- rep("grey80", vcount(net.undir))
vcol[unlist(largest_cliques(net.undir))] <- "gold"
plot(as.undirected(net.undir), vertex.label=V(net.undir)$name, vertex.color=vcol)
plot(ceb,net)
V(net)
V(net)$name
test.community$nodes$functional.group
V(net)$type <- test.community$nodes$functional.group
assortativity_nominal(net, V(net)$type, directed=F)
help(assortativity_nominal)
assortativity_nominal(net, V(net)$type, directed=T)
assortativity_nominal(net, V(net)$name, directed=T)
V(net)$type
V(net)$name
assortativity_degree(net, directed=F)
assortativity_degree(net, directed=T)
assortativity(net, directed=T)
assortativity(net, V(net)$type, directed=T)
test.community$nodes
read.csv('~/Google Drive/SNAPP-Soil-Carbon/Products/CA Rangelands/1. Logic Chain/Food web approach/Example/properties.csv')
read.csv('~/Google Drive/SNAPP-Soil-Carbon/Products/
CA Rangelands/1. Logic Chain/Food web approach/
Example/properties.csv')
# Read whole data set
test.community <- LoadCommunity('~/Google Drive/SNAPP-Soil-Carbon/
Products/CA Rangelands/
1. Logic Chain/Food web approach/
Example')
library(bibliometrix) # For reading and analyzing ISI stuff
setwd("~/Google Drive/SNAPP-Soil-Carbon/Literature/soil_health/isi_searches")
data <- rbind(isibib2df(readFiles("soil.health_healthy.soil_1to500.bib")),
isibib2df(readFiles("soil.health_healthy.soil_501to1000.bib")),
isibib2df(readFiles("soil.health_healthy.soil_1001to1461.bib")))
help(termExtraction)
NetMatrix <- biblioNetwork(termExtraction(data,Field="AB"), analysis = "co-occurrences", network = "abstracts")
net=networkPlot(NetMatrix, n = 20, Title = "Abstract Co-occurrences", type = "kamada", size=T)
CS <- conceptualStructure(termExtraction(data,Field="AB"))
